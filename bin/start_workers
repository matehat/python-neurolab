#!/usr/bin/env python
import signal
import subprocess
import sys
import os
import time
from os.path import abspath, join, split

# Detecting setup
_bin = split(abspath(__file__))[0]

if 'NEUROPY_PATH' in os.environ:
    basedir = os.environ['NEUROPY_PATH']
else:
    basedir = split(_bin)[0]

if basedir not in sys.path:
    sys.path.append(basedir)
    sys.path.append(join(basedir, 'httpserver'))

os.environ['PYTHONPATH'] = "%s:%s" % (basedir, os.environ.get('PYTHONPATH', ''))
os.environ['DJANGO_SETTINGS_MODULE'] = 'httpserver.settings'

try:
    import config
except ImportError:
    print "Could not import "

from neurolab.jobs import *
from neurolab.db import mongodb

coll = Signal._meta['collection']
workers, queues = {}, config.QUEUES

# Handle termination and interruption

def send_signal(worker, sig):
    worker.send_signal(sig)

def handle_signal(sig, frame=None):
    for worker in workers.values():
        send_signal(worker, sig)
    
    sys.exit(0)


signal.signal(signal.SIGTERM, handle_signal)
signal.signal(signal.SIGINT, handle_signal)

def launch_worker(worker):
    proc = subprocess.Popen(['/usr/bin/env', 'python', 
        join(basedir, 'neurolab/jobs/worker.py'), str(worker.id)],
        stderr=subprocess.STDOUT
    )
    worker.pid = proc.pid
    print 'Launching', worker.id, worker.pid
    worker.save()
    workers[proc.pid] = proc

def restart_worker(worker):
    queue = worker.queue
    if worker.pid and worker.pid in workers:
        stop_worker(worker)
    else:
        worker.delete()
    create_worker(queue, 1)

def stop_worker(worker):
    pid = worker.pid
    if worker.pid is None:
        worker.delete()
        return
    send_signal(workers[worker.pid], signal.SIGINT)
    del workers[pid]
    worker.delete()


def create_workers(queue, num=None):
    for i in range(num or queue.workers):
        worker = Worker(queue=queue)
        worker.save()
        launch_worker(worker)
    

def init_workers(): # Initial workers spawning
    global workers
    # Remove locks on jobs if previous instances were not shut normally
    Job.objects._collection_obj.update(
        {'inprogress': True},
        {'$set': {'inprogress': False}, '$unset': {'worker': 1}},
        multi=True
    )
    
    Worker.objects.delete()
    print "Fixing unfinished jobs (in case of bad shutdown)"
    
    for queue in Queue.objects:
        create_workers(queue)


init_workers()

while True: # Run Loop
    signals = mongodb(coll)
    obj = signals.find_and_modify(
        {'read': {'$exists': False}},
        {'$set': {'read': 1}}
    )
    
    if obj is not None:
        signals.remove({'_id': obj['_id']})
        sig = Signal._from_son(obj)
        
        if sig.action == 'restart':
            if isinstance(sig.target, Worker):
                restart_worker(sig.target)
            elif isinstance(sig.target, Queue):
                for worker in Worker.objects(queue=sig.target):
                    stop_worker(worker)
                create_workers(sig.target)
        
        elif sig.action == 'stop':
            for worker in Worker.objects(queue=sig.target):
                stop_worker(worker)
        
        elif sig.action == 'start':
            create_workers(sig.target)
        
        sig.delete()
    time.sleep(1)
