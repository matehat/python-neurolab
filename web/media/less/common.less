/* --------------------------------------------------------------
       grid.css
       * Sets up an easy-to-use grid of 24 columns.

       By default, the grid is 950px wide, with 24 columns
       spanning 30px, and a 10px margin between columns.
-------------------------------------------------------------- */

@page_width: 1110px;
@gutter_width: 10px;
@column_width: 30px;
@column_count: 28;

@input_border: 1px;
@input_padding: 5px;

/* A container should group all your columns. */
.container() {
  width: @page_width;
  margin: 0 auto;
  display:block;
  :after {
    content: "\0020";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
    overflow:hidden;
  }
}

/* Use this class on any div.span / container to see the grid. */
.showgrid() {
  background: url(src/grid.png);
}


/* Columns
-------------------------------------------------------------- */

/* Sets up basic grid floating and margin. */
.column() {
  float: left;
  margin-right: 10px;
}

/* Use these classes to set the width of a column. */
.span(@n:0) {
  width: ( ( @n - 1 ) * @gutter_width + (@n * @column_width));
  float: left;
  margin-right: 10px;
}

/* Add these to a column to append empty cols. */
.append(@n:0) {
  padding-right: (@n * ( @column_width + @gutter_width ) );
}

/* Add these to a column to prepend empty cols. */
.prepend(@n:0) {
  padding-left:  (@n * ( @column_width + @gutter_width ) );
}

/* Use these classes on an element to push it into the
next column, or to pull it into the previous column.  */
.pull(@n:0) {
  margin-left: (@n * ( @column_width + @gutter_width ) );
  float: left;
  position:relative;
}
.push(@n:0) {
 margin-top:0;
 margin-right: 0 - (@n * ( @column_width + @gutter_width ) );
 margin-bottom: 1.5em;
 margin-left:(@n * ( @column_width + @gutter_width ) );
 float: right;
 position:relative;
}

/* The last column in a row needs this class. */
.last() {
  margin-right: 0;
}

/* Use these classes to set the width of an input or textarea. */
.input-span(@n:0) {
  width: ((@column_width + @gutter_width) * (@n - 1) + @column_width - 2*(@input_padding + @input_border)) !important; 
  border-left-width: @input_border !important;
  border-right-width: @input_border !important;
  padding-left: @input_padding !important;
  padding-right:@input_padding 5px!important;
}

/* Border on right hand side of a column. */
.border() {
  padding-right: 4px;
  margin-right: 5px;
  border-right: 1px solid #eee;
}

/* Border with more whitespace, spans one column. */
.colborder() {
  padding-right: 24px;
  margin-right: 25px;
  border-right: 1px solid #eee;
}

/* Misc classes and elements
-------------------------------------------------------------- */

/* In case you need to add a gutter above/below an element */
.prepend-top() {
  margin-top:1.5em;
}
.append-bottom() {
  margin-bottom:1.5em;
}

/* Use a .box to create a padded box inside a column.  */
.box() {
  padding: 1.5em;
  margin-bottom: 1.5em;
  background: #E5ECF9;
}


/* Clearing floats without extra markup
   Based on How To Clear Floats Without Structural Markup by PiE
   [http://www.positioniseverything.net/easyclearing.html] */

.clearfix() {
  display:block;
  :after {
    content: "\0020";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
    overflow:hidden;
  }
}

/* Regular clearing
   apply to column that should drop below previous ones. */

.clear() { clear:both; }

@background_color: #eee;